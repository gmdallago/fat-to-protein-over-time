# Análises TCC da Lilian Otoni
# Objetivo: Avaliar a série temporal de gordura:proteina em vacas da raça Holandesa


# Loading packages
extrafont::loadfonts(device = "win")

require(tidyverse)
require(tidylog)
require(DataExplorer)
require(nlme)
library(emmeans)


# Data ####

hol1 <- read.csv(
  "~/complete_lactations.csv",
  header= T,
  sep= ";",
  dec= ",",
  na.strings = c("NA", "?", "")) %>% 
  rename("Raca" = "Raça")

names(hol1) <- tolower(names(hol1))


# Cleaning ####

# Formatanddo as datas
hol1$data.nascimento <- as.Date(hol1$data.nascimento, format= "%d/%m/%y")
hol1$data.parto <- as.Date(hol1$data.parto, format= "%d/%m/%y")
hol1$datamorte <- as.Date(hol1$datamorte, format= "%d/%m/%y")


# Como os valores de produção são o total da lactação, estação e ano da lactação
# será obtido com base na data quando a lactação terminou


hol1$fim.lacta <- hol1$data.parto + hol1$diaslactacao

# O arquivo de dados foi extraído em 6 de Julho de 2017. Dessa forma, lactações que terminaram 
# após essa data não são confiáveis

hol1 <- hol1 %>% 
  filter(fim.lacta < "2017-07-06")


# Criando variável estação do ano do parto
get.season <- function(DATES) {
  WS <- as.Date("2016-12-21", format = "%Y-%m-%d") # Summer
  SE <- as.Date("2016-3-20",  format = "%Y-%m-%d") # Fall
  SS <- as.Date("2016-6-20",  format = "%Y-%m-%d") # Winter
  FE <- as.Date("2016-9-22",  format = "%Y-%m-%d") # Spring
  
  # Convert dates from any year to 2016 dates (Leap year)
  d <- as.Date(strftime(DATES, format="2016-%m-%d"))
  
  as.factor(ifelse (d >= WS | d < SE, "Verao",
                    ifelse (d >= SE & d < SS, "Outono",
                            ifelse (d >= SS & d < FE, "Inverno", "Primavera"))))
}


hol1$estacao.parto <- get.season(hol1$data.parto)
hol1$estacao.fim.lacta <- get.season(hol1$fim.lacta)

# Criando variável ano do parto
hol1$ano.parto <- lubridate::year(hol1$data.parto)
hol1$ano.fim.lacta <- lubridate::year(hol1$fim.lacta)


# Criando variável idade do parto em meses

# turn a date into a 'monthnumber' relative to an origin
monnb <- function(d) {
  lt <- as.POSIXlt(as.Date(d, origin="1900-01-01"))
  lt$year*12 + lt$mon
} 

# compute a month difference as a difference between two months
mondf <- function(d1, d2) {
  monnb(d1) - monnb(d2)
}


hol1$idade.parto <- mondf(d2 = hol1$data.nascimento, d1 = hol1$data.parto)


# Variável ordem do parto tem varias inconsistências, tentando corrigir pelo menos a maioria delas

hol2 <- hol1 %>%
  arrange(id.animal, idade.parto) %>%
  group_by(id.animal) %>%
  mutate(ordem.parto.ok = ifelse(is.na(lag(ordem.parto)) == TRUE, #| status.do.nascimento.da.cria == "ABORTO",
                                 ordem.parto,
                                 ifelse((abs(idade.parto) - abs(lag(idade.parto))) < 28 & (ordem.parto - lag(ordem.parto)) != 1,
                                        NA, ordem.parto))) %>% 
  mutate(ordem.parto.ok = ifelse(is.na(ordem.parto.ok) == TRUE,
                                 lag(ordem.parto.ok)+1, ordem.parto.ok)) %>%
  mutate(ordem.parto.ok = ifelse(is.na(ordem.parto.ok) == TRUE,
                                 lag(ordem.parto.ok)+1, ordem.parto.ok)) %>%
  mutate(ordem.parto.ok = ifelse(is.na(ordem.parto.ok) == TRUE,
                                 lag(ordem.parto.ok)+1, ordem.parto.ok)) %>%
  mutate(ordem.parto.ok = ifelse(is.na(ordem.parto.ok) == TRUE,
                                 lag(ordem.parto.ok)+1, ordem.parto.ok)) %>%
  mutate(ordem.parto.ok = ifelse(is.na(ordem.parto.ok) == TRUE,
                                 lag(ordem.parto.ok)+1, ordem.parto.ok)) %>%
  ungroup()


# A maioria das inconsistências foram corrigidas!!! :D :D :D


# Dados descritivos iniciais para o Material e Métodos
hol2 %>% 
  filter(raca == "HOLANDES") %>% 
  count()
  
  
hol2 %>% 
  filter(raca == "HOLANDES") %>% 
  summarise(animal = n_distinct(id.animal),
            herd = n_distinct(cliente))

hol2 %>% 
  filter(raca == "HOLANDES") %>% 
  select(fim.lacta) %>% 
  summary()


# Preparação dos dados

hol3 <- hol2 %>%
  
  
  # Mantendo somente observações de animais da raça Holandesa
  filter(raca == "HOLANDES") %>% 
  
  
  # Removendo entradas duplicadas com base no ID Animal, ano e estação do parto (ordem do parto não é 100%)
  distinct(id.animal, ano.parto, estacao.parto, .keep_all = TRUE) %>% 
  
  # Removing observação onde a idade do parto está fora dos intervalos estabelecidos
  mutate(remove = ifelse(ordem.parto.ok == 1 & !(idade.parto %in% c(20:40)), "yes",
                         ifelse(ordem.parto.ok == 2 & !(idade.parto %in% c(29:60)), "yes",
                                ifelse(ordem.parto.ok == 3 & !(idade.parto %in% c(38:70)), "yes",
                                       ifelse(ordem.parto.ok == 4 & !(idade.parto %in% c(47:90)), "yes", 
                                              ifelse(ordem.parto.ok == 5 & !(idade.parto %in% c(60:100)), "yes",
                                                     ifelse(ordem.parto.ok > 5 & !(idade.parto %in% c(70:120)), "yes","no")
                                              )))))) %>% 
  filter(remove == "no") %>% 
  
  # Agrupando paridades maiores ou iguais que 5
  mutate(ordem.parto.stats = factor(ifelse(ordem.parto > 5,
                                           "6+", ordem.parto),
                                    levels = c("1", "2", "3", "4", "5", "6+"))) %>%
  
  # Mantendo apenas lactações de no máximo 500 dias
  filter(diaslactacao %in% c(1:500)) %>% 
  
  # Removendo NAs and Zeros on fat and protein production
  filter(!is.na(prodgord305dias),
         prodgord305dias !=0,
         !is.na(prodprot305dias),
         prodprot305dias !=0) %>% 
  
  # Getting month of calving e mês de fim da lactação
  mutate(mes.parto = lubridate::month(data.parto),
         mes.fim.lacta = lubridate::month(fim.lacta)) %>% 
  
  
  
  # Calculando a relação gordura:proteína
  mutate(ftp = prodgord305dias/prodprot305dias) %>% 
  
  # Identificando e removendo outliers
  filter(ftp >= quantile(ftp, 0.01) & ftp <= quantile(ftp, 0.99)) %>%
  
  
  # Keeping herds with at least 5 observations for the random effect
  group_by(cliente) %>%
  mutate(n_obs = n()) %>%
  ungroup() %>% 
  filter(n_obs >= 10) %>% 
  
  
  # Keeping only observations from 2001 to 2016 because the other years do
  # not have observations on all months
  filter(ano.fim.lacta %in% c(2001:2016)) %>% 
  
  # Creating position variable to evaluate correlation structures
  # The position variable defines the indices of the correlation parameters
  # for each observation and must evaluate to an integer vector, 
  # with nonrepeated values per group, such that its unique values, when sorted,
  # form a sequence of consecutive integers
  # 
  # Cliente is the group (random effect) evaluated in this study
  arrange(ano.fim.lacta, mes.fim.lacta, cliente, ordem.parto.ok, fim.lacta) %>% 
  group_by(cliente) %>% 
  mutate(timePos = row_number()) %>% 
  ungroup()


# Análise exploratória ####
# Dados descritivos sobre o arquivo que foi analisado

hol3 %>% 
  nrow()

hol3 %>% 
  summarise(animal = n_distinct(id.animal),
            herd = n_distinct(cliente))

hol3 %>% 
  select(ano.fim.lacta) %>% 
  summary()


hol3 %>% 
  summarise(AVG = mean(ftp),
            SD = sd(ftp),
            MIN = min(ftp),
            MAX = max(ftp)) %>% 
  round(2)




ggplot(hol3, 
       aes(x = ftp)) +
  geom_histogram()


ggplot(hol3, 
       aes(x = ftp)) +
  facet_wrap(~ ano.fim.lacta,
             scales = "free") +
  geom_histogram()




ggplot(hol3, 
       aes(x = ftp)) +
  facet_wrap(~ mes.parto) +
  geom_histogram()

set.seed(1801)
ggplot(hol3 %>%
         mutate(ano.parto = as.factor(ano.parto),
                mes.parto = as.factor(mes.parto)) %>% 
         filter(cliente %in% sample(unique(cliente),5)), 
       aes(y = ftp,
           x = mes.parto,
           color = cliente)) +
  geom_boxplot(show.legend = FALSE)



# Modeling ####

options(contrasts = c("contr.sum", "contr.poly"))
model1 <- lme(ftp ~ diaslactacao + ordem.parto.stats + ano.fim.lacta + mes.fim.lacta,
              random = ~ 1|cliente,
              data = hol3 %>%
                mutate(ano.fim.lacta = as.factor(ano.fim.lacta),
                       mes.fim.lacta = as.factor(mes.fim.lacta)))


# Testando estruturas de correlação uma vez que as observações foram coletadas ao longo do tempo
options(contrasts = c("contr.sum", "contr.poly"))


model1.ar1cor <- lme(ftp ~ diaslactacao + ordem.parto.stats + ano.fim.lacta + mes.fim.lacta,
                     random = ~ 1|cliente,
                     data = hol3 %>%
                       mutate(ano.fim.lacta = as.factor(ano.fim.lacta),
                              mes.fim.lacta = as.factor(mes.fim.lacta)),
                     correlation = corAR1(form = ~ timePos))


model1.CompSymcor <- lme(ftp ~ diaslactacao + ordem.parto.stats + ano.fim.lacta + mes.fim.lacta,
                         random = ~ 1|cliente,
                         data = hol3 %>%
                           mutate(ano.fim.lacta = as.factor(ano.fim.lacta),
                                  mes.fim.lacta = as.factor(mes.fim.lacta)),
                         correlation = corCompSymm())


# Avaliando os modelos
anova(model1,
      model1.ar1cor,
      model1.CompSymcor,
      test = FALSE)


# Modelo com autocorrelação de level 1 foi o melhor

## Análise dos resíduos ####

# Assumption 1: Within-group errors are independent, follow a normal distribution ~ N(0, Ï2), 
# and are independent of random effects


# Errors should be centered at zero in the following plot
plot(model1.ar1cor, cliente ~ resid(.), abline = 0)


# Looking at the variance between fixed effects
plot(model1.ar1cor, resid(., type = "p") ~ fitted(.) | ordem.parto.stats,
     id = NULL, adj = -0.3)

plot(model1.ar1cor, resid(., type = "p") ~ fitted(.) | ano.fim.lacta,
     id = NULL, adj = -0.3)

plot(model1.ar1cor, resid(., type = "p") ~ fitted(.) | mes.fim.lacta,
     id = NULL, adj = -0.3)


# Checking if the residuals follow a normal distribution
car::qqPlot(resid(model1.ar1cor, type = "pearson"))


# Evaluating within-group heteroscedasticity and independence
plot(model1.ar1cor)


# Assumption 2: Random effects are normally distributed ~ N (0, sigma2) and
# are independent for different groups

car::qqPlot(ranef(model1.ar1cor, level = 1)$"(Intercept)",
            main = "Rebanho")

# Independence
plot(ranef(model1.ar1cor, level = 1)$"(Intercept)")
abline(h = 0,
       col = "red")


# Assumptions were mostly met. There is a little departure from normality, but
# it should not be a big problem

# Getting significance of the fixed effects
anova(model1.ar1cor, type = "marginal")

anova(model1.ar1cor, type = "marginal")$"p-value" %>% 
  round(2)

summary(model1.ar1cor)
caret::R2(obs = hol3$ftp,
          pred = predict(model1.ar1cor, hol3 %>%
                           mutate(ano.fim.lacta = as.factor(ano.fim.lacta),
                                  mes.fim.lacta = as.factor(mes.fim.lacta)))) %>%
  round(2)

caret::MAE(obs = hol3$ftp,
          pred = predict(model1.ar1cor, hol3 %>%
                           mutate(ano.fim.lacta = as.factor(ano.fim.lacta),
                                  mes.fim.lacta = as.factor(mes.fim.lacta)))) %>%
  round(2)


## Extraíndo resultados ####


# Ano
# Médias marginais
emmeans(model1.ar1cor, ~ ano.fim.lacta)


# Avaliando tendência
contrast(emmeans(model1.ar1cor, pairwise ~ ano.fim.lacta)[[1]], 
         "poly")


# Regressão linear usando as médias marginais
ano.ftp.lm <- lm(emmean ~ ano.fim.lacta,
                 data = emmeans(model1.ar1cor, ~ ano.fim.lacta) %>% 
                   as.data.frame() %>% 
                   mutate(ano.fim.lacta = as.numeric(ano.fim.lacta)))


model.res <- data.frame(model = paste("hat(Y) ==", 
                                      format(round(coef(ano.ftp.lm)[1], digits = 2), nsmall = 2),
                                      format(round(coef(ano.ftp.lm)[2], digits = 4),nsmall = 4), "~'x'",
                                      sep = ""),
                        r2 = paste("italic(R^2) ==", format(round(summary(ano.ftp.lm)$adj.r.squared, 3), digits = 2),
                                   sep = ""),
                        p_valor = paste("~' '~", 
                                        "~italic(P-valor) == ", 
                                        signif(pf(summary(ano.ftp.lm)$fstatistic[1], 
                                                  summary(ano.ftp.lm)$fstatistic[2], 
                                                  summary(ano.ftp.lm)$fstatistic[3], 
                                                  lower.tail=FALSE),1),
                                        sep = ""))



ggplot(emmeans(model1.ar1cor, ~ ano.fim.lacta) %>% 
         as.data.frame(),
       aes(x = as.numeric(as.character(ano.fim.lacta)),
           y = emmean)) +
  geom_errorbar(aes(ymin = lower.CL,
                    ymax = upper.CL),
                width = 0.25, size = 0.25, color = "gray33") +
  geom_point(size = 2.5, show.legend = FALSE,
             color = "black") +
  geom_smooth(method = "lm", se = TRUE,
              formula =  'y ~ x',
              size = 0.5) +
  scale_y_continuous(limits = c(1.06, 1.18),
                     breaks = seq(1.06, 1.18, 0.02),
                     expand = expansion(mult = 0, add = 0)) +
  scale_x_continuous(breaks = seq(2001, 2016, 3)) +
  theme_classic(base_family = "Times New Roman") +
  labs(x = "Ano",
       y = "Relação gordura:proteína") + 
  geom_text(data = model.res,
            mapping = aes(x = 2004, y = 1.08,
                          label = model),
            family = "Times New Roman",
            parse = TRUE) +
  geom_text(data = model.res,
            mapping = aes(x = 2004, y = 1.07,
                          label = paste(r2, p_valor)),
            family = "Times New Roman",
            parse = TRUE) +
  theme(axis.text = element_text(size = 10, color = "black"),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"),
        axis.title.x = element_text(size = 10,
                                    margin = margin(t = 5, # top
                                                    r = 0, # right 
                                                    b = 0, # bottom
                                                    l = 0)),
        axis.title.y = element_text(size = 10,
                                    margin = margin(t = 0, # top
                                                    r = 10, # right 
                                                    b = 0, # bottom
                                                    l = 0)))

ggsave(filename = paste(Sys.Date(), "Ano.jpeg", sep = "_"),
       units = "cm",
       width = 15,
       height = 9,
       dpi = 700)


# Paridade
emmeans(model1.ar1cor, ~ ordem.parto.stats)

contrast(emmeans(model1.ar1cor, pairwise ~ ordem.parto.stats)[[1]], 
         "poly")

multcomp::cld(emmeans(model1.ar1cor, ~ ordem.parto.stats),
              alpha = 0.05,
              Letters = letters,
              adjust = "tukey")

ggplot(emmeans(model1.ar1cor, ~ ordem.parto.stats) %>% 
         as.data.frame() %>% 
         mutate(labels = c("b", "c", "b", rep("a", 3))), 
       aes(x = ordem.parto.stats,
           y = emmean)) +
  geom_errorbar(aes(ymin = lower.CL,
                    ymax = upper.CL),
                width = 0.25, size = 0.25, color = "gray33") +
  geom_point(size = 2.5, show.legend = FALSE,
             color = "black") +
  scale_y_continuous(limits = c(1.08, 1.16),
                     breaks = seq(1.08, 1.16, 0.02),
                     expand = expansion(mult = 0, add = 0)) +
  geom_text(aes(label = labels,
                y = upper.CL),
            vjust = -1.5, color = "black",
            family = "Times New Roman", size = 3.3) +
  theme_classic(base_family = "Times New Roman") +
  labs(x = "Paridade",
       y = "Relação gordura:proteína") + 
  theme(axis.text = element_text(size = 10, color = "black"),
        axis.line = element_line(color = "black"),
        axis.ticks = element_line(color = "black"),
        axis.title.x = element_text(size = 10,
                                    margin = margin(t = 5, # top
                                                    r = 0, # right 
                                                    b = 0, # bottom
                                                    l = 0)),
        axis.title.y = element_text(size = 10,
                                    margin = margin(t = 0, # top
                                                    r = 10, # right 
                                                    b = 0, # bottom
                                                    l = 0)))
  
ggsave(filename = paste(Sys.Date(), "Paridade.jpeg", sep = "_"),
       units = "cm",
       width = 12,
       height = 9,
       dpi = 700)
